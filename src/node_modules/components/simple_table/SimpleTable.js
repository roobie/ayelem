const hyper = require('hyperhtml/index')
const {bind, wire} = hyper
const xtend = require('xtend')
const _ = require('lodash')

const {linearStateMachine} = require('utility')

const SimpleTh = require('./SimpleTh')
const SimpleTr = require('./SimpleTr')

const initialSortState = linearStateMachine({
  states: [null, 'asc', 'desc']
})

module.exports = class SimpleTable extends hyper.Component {
  get defaultState () {
    return {
      // all items that are currently rendered
      // type: Array<Any>
      items: [],

      // the items that have been selected in the UI
      // type: same as this.items
      selectedItems: [],

      appliedSorts: {},
    }
  }

  /**
    @param props {Object}
    @param props.initialState {Object}
    @param props.getData {Array<Filter> -> Promise<Array<Object>>}
  */
  constructor (props) {
    super()
    this.props = props
    const state = xtend(props.initialState, {
      items: props.items,
      appliedSorts: props.columns.reduce((out, column) => {
        out[column.property] = initialSortState
        return out
      }, {})
    })
    this.setState(state)
  }

  updateOrder ({column}) {
    const newSorts = xtend(this.state.appliedSorts, {
      [column.property]: this.state.appliedSorts[column.property].step()
    })

    const sorts = _(newSorts)
      .map((v, k) => [k, v])
      .filter(pair => !!pair[1].current)
      .valueOf()

    this.setState({
      appliedSorts: newSorts,
      items: _.orderBy(this.props.items, sorts.map(x => x[0]), sorts.map(x => x[1].current))
    })
  }

  render() {
    const html = this.html.bind(this) // just to make Atom hilite the template
    return html`
      <div>
        <table class=table>
          <thead>
            <tr>
              ${this.props.columns.map(column => {
                return new SimpleTh(xtend({
                  orderState: this.state.appliedSorts[column.property],
                }, column), {
                  updateSort: (args) => this.updateOrder(args)
                })
              })}
            </tr>
          </thead>
          <tbody>
            ${this.state.items.map(item => {
              return new SimpleTr({ columns: this.props.columns, item})
            })}
          </tbody>
        </table>
      </div>`
  }
}
