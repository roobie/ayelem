const assert = require('assert')

const greatestIndex = (array) => array.length - 1

const integerRing = (next, max, min = 0) => {
  // if next is less than minimum, wrap around to max
  return next < min ? max :
    // otherwise, if next is greater than max, wrap around to min
    next > max ? min :
    // otherwise, next is good, use that.
    next
}

module.exports = {
  className: function className (hash) {
    const result = []
    for (let k in hash) {
      if (hash[k]) {
        result.push(k)
      }
    }
    return result.join(' ')
  },

  linearStateMachine: function linearStateMachine (def, currentIndex = 0) {
    assert(def.states,
      'argument[0]{states} must be defined as an array of at least one element')
    assert(currentIndex >= 0, 'argument[1]currentIndex must be zero or greater')

    const maxIndex = greatestIndex(def.states)
    assert(currentIndex <= maxIndex,
      'argument[1]currentIndex must be less than the length of the array of defined states')

    const nextIndex = integerRing(currentIndex + 1, maxIndex)

    return {
      current: () => def.states[currentIndex],
      step: () => linearStateMachine(def, nextIndex)
    }
  }
}
